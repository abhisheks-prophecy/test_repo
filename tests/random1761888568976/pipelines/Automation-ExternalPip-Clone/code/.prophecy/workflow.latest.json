{
  "metainfo" : {
    "migrationVersions" : {
      "gemBuilderVersion" : "v1",
      "unitTestNullDataMigrated" : true
    },
    "functions" : { },
    "codeGenConfiguration" : {
      "editableConfig" : true,
      "plibVersion" : {
        "mavenVersion" : "8.14.0-SNAPSHOT"
      },
      "sparkConfigJinjaEnabled" : true,
      "workflowMode" : "batch"
    },
    "id" : "1",
    "uri" : "pipelines/Automation-ExternalPip-Clone",
    "pipelineSettingsInfo" : {
      "applicationName" : "Automation-ExternalPip-Clone",
      "hasApplication" : true,
      "isFunctionsPackageDirDefined" : true,
      "isNullValuesInUnitTestsEnabled" : true,
      "sparkConfigOptions" : {
        "disableSparkCreationTimeConfigGeneration" : true
      }
    },
    "language" : "scala",
    "fabricId" : "3",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "scala",
      "udfs" : [ ],
      "functionPackageName" : "abhishekse2etestsprophecyioteam.automationexternalpclone.functions",
      "sharedFunctionPackageNames" : [ "io.prophecy.scalagems.functions", "io.prophecy.warehousegems.functions" ]
    },
    "udafs" : {
      "language" : "scala",
      "code" : "package udfs\n\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\n/**\n  * Here you can define your custom aggregate functions.\n  *\n  * Make sure to register your `udafs` in the register_udafs function below.\n  *\n  * Example:\n  *\n  * object GeometricMean extends UserDefinedAggregateFunction {\n  *   // This is the input fields for your aggregate function.\n  *   override def inputSchema: org.apache.spark.sql.types.StructType =\n  *     StructType(StructField(\"value\", DoubleType) :: Nil)\n  *\n  *   // This is the internal fields you keep for computing your aggregate.\n  *   override def bufferSchema: StructType = StructType(\n  *     StructField(\"count\", LongType) ::\n  *     StructField(\"product\", DoubleType) :: Nil\n  *   )\n  *\n  *   // This is the output type of your aggregatation function.\n  *   override def dataType: DataType = DoubleType\n  *\n  *   override def deterministic: Boolean = true\n  *\n  *   // This is the initial value for your buffer schema.\n  *   override def initialize(buffer: MutableAggregationBuffer): Unit = {\n  *     buffer(0) = 0L\n  *     buffer(1) = 1.0\n  *   }\n  *\n  *   // This is how to update your buffer schema given an input.\n  *   override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n  *     buffer(0) = buffer.getAs[Long](0) + 1\n  *     buffer(1) = buffer.getAs[Double](1) * input.getAs[Double](0)\n  *   }\n  *\n  *   // This is how to merge two objects with the bufferSchema type.\n  *   override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n  *     buffer1(0) = buffer1.getAs[Long](0) + buffer2.getAs[Long](0)\n  *     buffer1(1) = buffer1.getAs[Double](1) * buffer2.getAs[Double](1)\n  *   }\n  *\n  *   // This is where you output the final value, given the final value of your bufferSchema.\n  *   override def evaluate(buffer: Row): Any = {\n  *     math.pow(buffer.getDouble(1), 1.toDouble / buffer.getLong(0))\n  *   }\n  * }\n  *\n  */\n\n\nobject UDAFs {\n  /**\n    * Registers UDAFs with Spark SQL\n    */\n  def registerUDAFs(spark: SparkSession): Unit = {\n    /**\n      * Example:\n      *\n      * spark.udf.register(\"gm\", GeometricMean)\n      *\n      */\n\n\n  }\n}\n"
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ {
          "name" : "Subgraph_1",
          "kind" : {
            "type" : "record",
            "fields" : [ ]
          },
          "optional" : false,
          "isWorkflowNodeConfiguration" : true,
          "isReferenced" : false
        } ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ {
      "name" : "spark.default.parallelism",
      "value" : "4"
    }, {
      "name" : "spark.sql.legacy.allowUntypedScalaUDF",
      "value" : "true"
    } ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ {
      "projectUID" : "1",
      "projectName" : "ProphecySparkBasicsScala",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "2",
      "projectName" : "ProphecyWarehouseScala",
      "externalDependencies" : [ ]
    } ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "io.prophecy.pipelines.automationexternalpipclone",
    "configTopLevelPackage" : "io.prophecy.pipelines.automationexternalpipclone",
    "configurationVersion" : "v2"
  },
  "connections" : [ {
    "id" : "__SPmywXQkDEdaq3bIlUS",
    "source" : "ogkOLzwaG028DV7y0KDze$$BTZR0c-_uf8p-stWjagIL",
    "sourcePort" : "xLOPfMO6Xey0-XizYS9d7$$iD_Flgpk09XRCh5W3yPC8",
    "target" : "AN-61pn_LvlFFfIBocgD6$$UjPgwmNKPGT50Vlub1KqL",
    "targetPort" : "DQEp_2q-glcDaoR8SYKyZ$$BGRSjxlBeFZhOb4NNTA4T"
  }, {
    "id" : "kojdzC3astH1YFtzNakM8",
    "source" : "ogkOLzwaG028DV7y0KDze$$BTZR0c-_uf8p-stWjagIL",
    "sourcePort" : "xLOPfMO6Xey0-XizYS9d7$$iD_Flgpk09XRCh5W3yPC8",
    "target" : "AfvOEGYSGX5HPUd28k_GS$$kBGTBdh1s_aPLtMj-cFZT",
    "targetPort" : "UtDFgkel-YVp-GX7dwbiD$$pZEBKgmfOiXfeyzMBB4Pn"
  } ],
  "processes" : {
    "ogkOLzwaG028DV7y0KDze$$BTZR0c-_uf8p-stWjagIL" : {
      "id" : "ogkOLzwaG028DV7y0KDze$$BTZR0c-_uf8p-stWjagIL",
      "component" : "Source",
      "metadata" : {
        "label" : "Automation-ExternalDataset-Clone",
        "slug" : "Automation_ExternalDataset_Clone",
        "x" : 20,
        "y" : 20,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "xLOPfMO6Xey0-XizYS9d7$$iD_Flgpk09XRCh5W3yPC8",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/Automation-ExternalDataset-Clone"
      }
    },
    "AN-61pn_LvlFFfIBocgD6$$UjPgwmNKPGT50Vlub1KqL" : {
      "id" : "AN-61pn_LvlFFfIBocgD6$$UjPgwmNKPGT50Vlub1KqL",
      "component" : "OrderBy",
      "metadata" : {
        "label" : "sort_by_fullname_asc",
        "slug" : "sort_by_fullname_asc",
        "x" : 220,
        "y" : 20,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "DQEp_2q-glcDaoR8SYKyZ$$BGRSjxlBeFZhOb4NNTA4T",
          "slug" : "in",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "customer_id",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "first_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "last_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "phone",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "email",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "country_code",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_open_date",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_flags",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "3rbEalWxE8A1AhYaj1GFM$$SOwB3wGyE5LAho9xDPHt6",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "columnsSelector" : [ "DQEp_2q-glcDaoR8SYKyZ$$BGRSjxlBeFZhOb4NNTA4T##first_name", "DQEp_2q-glcDaoR8SYKyZ$$BGRSjxlBeFZhOb4NNTA4T##last_name" ],
        "orders" : [ {
          "expression" : {
            "format" : "sql",
            "expression" : "concat(first_name,last_name)"
          },
          "sortType" : "asc"
        } ]
      },
      "componentInfo" : {
        "gemId" : "gitUri=http://gitserver:3000/oimECIpO_team_2/oimECIpO_project_1.git&subPath=&tag=0.2.6.3&projectSubscriptionProjectId=1&path=gems/OrderBy",
        "projectName" : "ProphecySparkBasicsScala"
      }
    },
    "AfvOEGYSGX5HPUd28k_GS$$kBGTBdh1s_aPLtMj-cFZT" : {
      "id" : "AfvOEGYSGX5HPUd28k_GS$$kBGTBdh1s_aPLtMj-cFZT",
      "component" : "Subgraph",
      "metadata" : {
        "label" : "Subgraph_1",
        "slug" : "Subgraph_1",
        "x" : 20,
        "y" : 220,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "UtDFgkel-YVp-GX7dwbiD$$pZEBKgmfOiXfeyzMBB4Pn",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "customer_id",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "first_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "last_name",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "phone",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "email",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "country_code",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_open_date",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "account_flags",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "xjZ0Vlz3EqAhu2sI7hzlQ$$l5xLI7YFnRghwLmjO5Z5y",
          "slug" : "out0"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "externalId" : "subgraphs/Automation-ExternalSG-Clone",
        "name" : "Automation-ExternalSG-Clone",
        "packageName" : "org.Automation-ExternalSG-Clone.subgraph"
      },
      "connections" : [ {
        "id" : "dzc9oLjhc0gbitqUb5uBF",
        "source" : "AfvOEGYSGX5HPUd28k_GS$$kBGTBdh1s_aPLtMj-cFZT",
        "sourcePort" : "UtDFgkel-YVp-GX7dwbiD$$pZEBKgmfOiXfeyzMBB4Pn",
        "target" : "6MUpxjPJd6hm3M1ligMFd$$wYHVl1Gj2z4HtbT3FdjIy",
        "targetPort" : "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28"
      }, {
        "id" : "0r-zK_PWQE_os_WzX-nY0",
        "source" : "6MUpxjPJd6hm3M1ligMFd$$wYHVl1Gj2z4HtbT3FdjIy",
        "sourcePort" : "NBZditrohPfRJ4LAm7B6K$$JcoShMabQgSvxLUlEJ3bN",
        "target" : "AfvOEGYSGX5HPUd28k_GS$$kBGTBdh1s_aPLtMj-cFZT",
        "targetPort" : "xjZ0Vlz3EqAhu2sI7hzlQ$$l5xLI7YFnRghwLmjO5Z5y"
      } ],
      "processes" : {
        "6MUpxjPJd6hm3M1ligMFd$$wYHVl1Gj2z4HtbT3FdjIy" : {
          "id" : "6MUpxjPJd6hm3M1ligMFd$$wYHVl1Gj2z4HtbT3FdjIy",
          "component" : "Reformat",
          "metadata" : {
            "label" : "select_customer_fields",
            "slug" : "select_customer_fields",
            "x" : -420,
            "y" : -140,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28",
              "slug" : "in",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "customer_id",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "first_name",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "last_name",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "phone",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "email",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "country_code",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "account_open_date",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "account_flags",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                } ]
              },
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "NBZditrohPfRJ4LAm7B6K$$JcoShMabQgSvxLUlEJ3bN",
              "slug" : "out"
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false,
            "autoUpdateOnRun" : false
          },
          "properties" : {
            "columnsSelector" : [ "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##customer_id", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##first_name", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##last_name", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##phone", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##email", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##country_code", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##account_open_date", "aQf36faNh39wvE4gceqO8$$myLPG-tJ-w27nG7g63O28##account_flags" ],
            "expressions" : [ {
              "target" : "customer_id",
              "expression" : {
                "format" : "sql",
                "expression" : "customer_id"
              },
              "description" : ""
            }, {
              "target" : "first_name",
              "expression" : {
                "format" : "sql",
                "expression" : "first_name"
              },
              "description" : ""
            }, {
              "target" : "last_name",
              "expression" : {
                "format" : "sql",
                "expression" : "last_name"
              },
              "description" : ""
            }, {
              "target" : "phone",
              "expression" : {
                "format" : "sql",
                "expression" : "phone"
              },
              "description" : ""
            }, {
              "target" : "email",
              "expression" : {
                "format" : "sql",
                "expression" : "email"
              },
              "description" : ""
            }, {
              "target" : "country_code",
              "expression" : {
                "format" : "sql",
                "expression" : "country_code"
              },
              "description" : ""
            }, {
              "target" : "account_open_date",
              "expression" : {
                "format" : "sql",
                "expression" : "account_open_date"
              },
              "description" : ""
            }, {
              "target" : "account_flags",
              "expression" : {
                "format" : "sql",
                "expression" : "account_flags"
              },
              "description" : ""
            } ]
          },
          "componentInfo" : {
            "gemId" : "gitUri=http://gitserver:3000/oimECIpO_team_2/oimECIpO_project_1.git&subPath=&tag=0.2.6.3&projectSubscriptionProjectId=1&path=gems/Reformat",
            "projectName" : "ProphecySparkBasicsScala"
          }
        }
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false,
    "autoUpdateOnRun" : false
  }
}