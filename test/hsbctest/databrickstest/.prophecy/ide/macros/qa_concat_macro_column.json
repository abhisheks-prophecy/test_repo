{
  "qa_concat_macro" : {
    "name" : "qa_concat_macro",
    "macroType" : "expression",
    "definition" : "concat(\n  aes_decrypt(unhex('83F16B2AA704794132802D248E6BFD4E380078182D1544813898AC97E709B28A94'), '0000111122223333'), \n  base64(aes_encrypt({{input_string_col}}, '1234567890abcdef', 'ECB', 'PKCS')), \n  bin(13), \n  btrim('    SparkSQL   '), \n  char(65), \n  chr(65), \n  concat({{input_string_col}}, 'SQL'), \n  concat_ws(' ', {{input_string_col}}, 'SQL'), \n  crc32('Spark'), \n  current_catalog(), \n  current_database(), \n  current_date(), \n  current_timestamp(), \n  current_timezone(), \n  current_user(), \n  date_add('2016-07-30', 1), \n  date_sub('2016-07-30', 1), \n  date_format('2016-04-08', 'y'), \n  date_from_unix_date(1), \n  date_part('YEAR', TIMESTAMP'2019-08-12 01:00:00.123456'), \n  date_part('MONTH', INTERVAL '2021-11' YEAR TO MONTH), \n  date_part('MINUTE', INTERVAL '123 23:55:59.002001' DAY TO SECOND), \n  date_trunc('HOUR', '2015-03-05T09:32:05.359'), \n  date_trunc('DD', '2015-03-05T09:32:05.359'), \n  datediff('2009-07-31', '2009-07-30'), \n  decode(encode('abc', 'utf-8'), 'utf-8'), \n  e(), \n  elt(1, 'scala', 'java'), \n  format_number(12332.123456, '##################.###'), \n  format_string('Hello World %d %s', 100, 'days'), \n  CAST(from_csv('1, 0.8', 'a INT, b DOUBLE') AS string), \n  CAST(from_json(\n    '{\"teacher\": \"Alice\", \"student\": [{\"name\": \"Bob\", \"rank\": 1}, {\"name\": \"Charlie\", \"rank\": 2}]}', \n    'STRUCT<teacher: STRING, student: ARRAY<STRUCT<name: STRING, rank: INT>>>') AS string), \n  CAST(from_unixtime(0, 'yyyy-MM-dd HH:mm:ss') AS string), \n  CAST(from_utc_timestamp('2016-08-31', 'Asia/Seoul') AS string), \n  CAST(get_json_object('{\"a\":\"b\"}', '$.a') AS string), \n  hash('Spark', array(123), 2), \n  hex(17), \n  CAST(hour('2009-07-30 12:58:59') AS string), \n  CAST(hypot(3, 4) AS string), \n  CAST(ilike('Spark', '_Park') AS string), \n  CAST(initcap('sPark sql') AS string), \n  CAST(last_day('2009-01-12') AS string), \n  CAST(lcase('SparkSql') AS string), \n  CAST(if(\n    1 < 2, \n    'a', \n    'b') AS string), \n  CAST(ifnull(NULL, array('2')) AS string))",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_string_col",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_all_null" : {
    "name" : "qa_all_null",
    "macroType" : "query",
    "definition" : "\n\n\n\n\nselect * from {{ model }} where {{ column_name }} is not null",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "column_name",
        "kind" : {
          "type" : "value",
          "value" : "'id'"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "multi_macro_expressions" : {
    "name" : "multi_macro_expressions",
    "macroType" : "expression",
    "definition" : "concat({{param_float}} + {{param_array[0]}}, 'hello')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param_float",
        "kind" : {
          "type" : "value",
          "value" : "12"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "param_array",
        "kind" : {
          "type" : "value",
          "value" : "[1, 2, 3]"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "param_dict",
        "kind" : {
          "type" : "value",
          "value" : "[1, 2, 3]"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "round_function" : {
    "name" : "round_function",
    "macroType" : "expression",
    "definition" : "ROUND({{n1}}, {{scale}})",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "n1",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "scale",
        "kind" : {
          "type" : "value",
          "value" : "2"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_all_not_null" : {
    "name" : "qa_all_not_null",
    "macroType" : "query",
    "definition" : "\nselect * from {{ model_password }} where {{ column_name }} is not null",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model_password",
        "kind" : {
          "type" : "value",
          "value" : "'customers'"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "column_name",
        "kind" : {
          "type" : "value",
          "value" : "'id'"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_model_all_above_given_id" : {
    "name" : "qa_model_all_above_given_id",
    "macroType" : "query",
    "definition" : "\n\n\n\nSELECT * from {{model}} where {{col}} > {{ id_min }}",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "col",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "id_min",
        "kind" : {
          "type" : "value",
          "value" : "2"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_number_macro" : {
    "name" : "qa_number_macro",
    "macroType" : "expression",
    "definition" : "(2 % 1.8)\n+ (MOD(2, 1.8))\n+ ({{input_number_col}} & 5)\n+ ({{input_number_col}} * 3)\n+ (5 + {{input_number_col}})\n- (100 + 45)\n+ (3 / 2)\n+ (3 ^ 5)\n+ abs(-1)\n+ acos(1)\n+ acosh(1)\n+ array_position(array(3, 2, 1), 1)\n+ array_size(array('b', 'd', 'c', 'a'))\n+ ascii(2)\n+ asin(0)\n+ asinh(0)\n+ atan(0)\n+ atan2(0, 0)\n+ atanh(0)\n+ bit_count(0)\n+ bit_get(11, 0)\n+ bit_length('Spark SQL')\n+ bround(25, -1)\n+ cardinality(array('b', 'd', 'c', 'a'))\n+ cardinality(map('a', 1, 'b', 2))\n+ CAST('10' AS int)\n+ cbrt(27.0)\n+ ceil(3.1411, 3)\n+ ceiling(3.1411, 3)\n+ char_length('Spark SQL ')\n+ coalesce(NULL, 1, NULL)\n+ conv('100', 2, 10)\n+ cos(0)\n+ cosh(0)\n+ cot(1)\n+ csc(1)\n+ day('2009-07-30')\n+ dayofmonth('2009-07-30')\n+ dayofweek('2009-07-30')\n+ dayofyear('2016-04-09')\n+ degrees(3.141592653589793)\n+ element_at(array(1, 2, 3), 2)\n+ exp(0)\n+ expm1(0)\n+ EXTRACT(SECONDS FROM TIMESTAMP'2019-10-01 00:00:01.000001')\n+ EXTRACT(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND)\n+ factorial(2)\n+ find_in_set('ab', 'abc,b,ab,c,def')\n+ floor(-0.1)\n+ getbit(11, 0)\n+ greatest(10, 9, 2, 4, 3)\n+ instr('SparkSQL', 'SQL')\n+ json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')\n+ least(10, 9, 2, 4, 3)\n+ length('Spark SQL ')\n+ levenshtein('kitten', 'sitting')\n+ ln(10)\n+ locate('bar', 'foobarbar')\n+ log(10, 100)\n+ log10(10)\n+ log1p(0)\n+ log2(2)\n+ minute('2009-07-30 12:58:59')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_number_col",
        "kind" : {
          "type" : "value",
          "value" : "10"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_epl_data_macro" : {
    "name" : "qa_epl_data_macro",
    "macroType" : "query",
    "definition" : "\n\n\n{% set status = ['HomeTeam','AwayTeam'] %}\n\nwith summary as (\n{% for club in football_clubs %}\n    {% for st in status %}\n    select \n        {{ st }} as team,\n        {% if st == 'HomeTeam' %}\n                case \n                    when FTR = 'H' then 3\n                    when FTR = 'D' then 1\n                    else 0 end points\n        {% else %}\n                case \n                    when FTR = 'A' then 3\n                    when FTR = 'D' then 1\n                    else 0 end points\n        {% endif %}\n    from {{ source('staging', 'english-premier-league-table') }}\n    where season = 'season-1819'\n        and {{ st }} = '{{ club }}'\n        {% if not loop.last %} UNION ALL {% endif %}\n    {% endfor %}\n    {% if not loop.last %} UNION ALL {% endif %}\n{% endfor %}\n)\n\n\nselect \n    team, \n    sum(points) as total_points\nfrom summary\ngroup by team\norder by total_points desc",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "football_clubs",
        "kind" : {
          "type" : "value",
          "value" : "['Man United', 'Liverpool', 'Man City']"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_concat_macro_calling_complex_concat" : {
    "name" : "qa_concat_macro_calling_complex_concat",
    "macroType" : "expression",
    "definition" : "concat({{ SQL_DatabricksParentProjectMain.qa_concat_macro(param_column) }}, {{param_column}})",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_get_unique_count" : {
    "name" : "qa_get_unique_count",
    "macroType" : "query",
    "definition" : "\n\n\n\nselect count(*)\nfrom (\n    select\n        {{ column_name }}\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) >= 1\n) validation_errors",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "column_name",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_complex_macro" : {
    "name" : "qa_complex_macro",
    "macroType" : "query",
    "definition" : "\n\n\n\nwith all_values as (\n    select distinct {{column_name_int}} as col_int from {{model}}\n),\npayments_validation_errors as (\n    select\n        col_int\n    from all_values\n    where col_int not in (\n        {% for accepted_value in accepted_values %}\n            {% if accepted_value >= 5 %}\n            5\n            {% else %}\n            {{ accepted_value }}\n            {% endif %}\n            {% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n)\nselect * from payments_validation_errors",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "column_name_int",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "accepted_values",
        "kind" : {
          "type" : "value",
          "value" : "[1, 2]"
        },
        "optional" : true,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_test_relationship" : {
    "name" : "qa_test_relationship",
    "macroType" : "query",
    "definition" : "\n\n\nselect count(*)\nfrom (\n    select {{ model1_col }} as id from {{ model }}\n) as child\nleft join (\n    select {{ model2_col }} as id from {{ model2 }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "model1",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "model2",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "model1_col",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      }, {
        "name" : "model2_col",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_concat_macro_column" : {
    "name" : "qa_concat_macro_column",
    "macroType" : "expression",
    "definition" : "concat({{param1_column}}, 'hellomain_password')",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param1_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_macro_call_another_macro_column" : {
    "name" : "qa_macro_call_another_macro_column",
    "macroType" : "expression",
    "definition" : "concat({{ SQL_DatabricksParentProjectMain.qa_concat_macro_column(param_column) }}, {{param_column}})",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "param_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  },
  "qa_boolean_macro" : {
    "name" : "qa_boolean_macro",
    "macroType" : "expression",
    "definition" : "(1 != 2)\nor (true != NULL)\nor (NULL != NULL)\nor (1 < 2)\nor (2 <= 2)\nor (2 <=> 2)\nor ((2 % 1.8) == 1)\nor (to_date('2009-07-30 04:17:52') < to_date('2009-07-30 04:17:52'))\nor (add_months('2016-08-31', 1) < add_months('2017-08-31', 3))\nor (true and false)\nor array_contains(array_distinct(array(1, 2, 3)), 2)\nor array_contains(array_except(array(1, 2, 3), array(1, 3, 5)), 2)\nor array_contains(array_intersect(array(1, 2, 3), array(1, 3, 5)), 10)\nor (array_join(array({{input_string_column}}, NULL, 'world'), ' ', ',') LIKE '%hello%')\nor (array_max(array(1, 20, NULL, 3)) > 10)\nor (array_min(array(1, 20, NULL, 3)) > 20)\nor array_contains(array_remove(array(1, 2, 3, NULL, 3), 3), 3)\nor array_contains(array_repeat(5, 2), 6)\nor array_contains(array_union(array(1, 2, 3), array(1, 3, 5)), 10)\nor arrays_overlap(array(1, 2, 3), array(3, 4, 5))\nor (10 BETWEEN 2 AND 20)\nor contains({{input_string_column}}, 'Spark')\nor endswith({{input_string_column}}, 'SQL')\nor (\n     EXISTS(array(1, 2, 3), \n     x -> x % 2 == 0)\n   )\nor array_contains(filter(array(1, 2, 3), \n   x -> x % 2 == 1), 5)\nor array_contains(flatten(array(array(1, 2), array(3, 4))), 10)\nor forall(array(1, 2, 3), \n   x -> x % 2 == 0)\nor (1 IN (2, 3, 4))\nor (isnan(CAST('NaN' AS double)))",
    "parameters" : {
      "type" : "record",
      "fields" : [ {
        "name" : "input_string_column",
        "kind" : {
          "type" : "value"
        },
        "optional" : false,
        "isWorkflowNodeConfiguration" : false,
        "isReferenced" : false
      } ]
    },
    "staleState" : "none",
    "version" : 0
  }
}